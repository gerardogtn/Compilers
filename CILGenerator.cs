/*
  Buttercup compiler - Common Intermediate Language (CIL) code generator.
  Copyright (C) 2013 Ariel Ortiz, ITESM CEM

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Text;
using System.Collections.Generic;

namespace int64 {

    class CILGenerator {

        string currentScope;
        ISet<String> GlobalVariables;
        Dictionary<String, FunctionDefinition> Functions;

        public CILGenerator(ISet<String> GlobalVariables, Dictionary<String, FunctionDefinition> Functions) {
            this.GlobalVariables = GlobalVariables;
            this.Functions = Functions;
        }

        //-----------------------------------------------------------

        int labelCounter = 0;
        string lastLabel;

        string GenerateLabel() {
            this.lastLabel = String.Format("'${0:000000}'", labelCounter++);
            return this.lastLabel;
        }


        //----------------------- NODES ----------------------------//

        public string Visit(Program node) {

            var globalVars = new StringBuilder();
            var functionsDefinition = new StringBuilder();
            foreach (var child in node) {
                if (child is VarDefList) {
                    globalVars.Append(String.Format(
                        Visit((dynamic) child)
                    ));
                    continue;
                }
                functionsDefinition.Append(String.Format(
                    Visit((dynamic) child)
                ));
            }

            return @"// Code generated by the int64 compiler.
.assembly 'int64' {}
.assembly extern 'int64lib' {}
.class public 'int64Program' extends ['mscorlib']'System'.'Object' {

   //------------------ GLOBAL VARIABLES ------------------//
"  + globalVars.ToString() + @"
   //--------------------- FUNCTIONS ---------------------//
"  + functionsDefinition.ToString().Replace("¿","{").Replace("?","}")
      + "\t\tret\n\t}\n}\n";
        }

        //-----------------------------------------------------------
        public string Visit(ParamList node) {
            var sb = new StringBuilder();
            foreach (var parameter in node) {
                sb.Append(String.Format(
                    "int64 {0}, ",
                    "'" + parameter.AnchorToken.Lexeme + "'"
                ));
            }
            if (sb.Length > 0) {
                sb.Remove(sb.Length-2, 2); // Remove extra comma
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(FunDef node) {

            this.currentScope = node.AnchorToken.Lexeme;

            var parameters = new StringBuilder();
            var localVars = new StringBuilder();
            var statements = new StringBuilder();

            foreach (var child in node) {
                if (child is ParamList) {
                    parameters.Append( Visit((dynamic) child) );
                }
                else if (child is VarDefList) {
                    localVars.Append("\t\t\t.locals init (");
                    foreach (var localVar in child) {
                        localVars.Append(String.Format(
                            "\n\t\t\t\tint64 {0},",
                            "'" + localVar.AnchorToken.Lexeme + "'"
                        ));
                    }
                    localVars.Append(")\n");
                    localVars.Replace(",)", ")");
                }
                else if (child is StmtList) {
                    statements.Append( Visit((dynamic) child) );
                }
            }

            var sb = new StringBuilder();
            sb.Append(String.Format(
                "\t\t.method public static hidebysig" +
                    "\n\t\t\tdefault int64 {0} ({1}) cil managed ¿\n" +
                    "{2}{3}\n\t\t\tldc.i8.0\n\t\t\tret\n\t\t?\n\n",
                "'" + node.AnchorToken.Lexeme + "'",
                parameters.ToString(),
                localVars.ToString(),
                statements.ToString())
            );
            return sb.ToString();
        }

        //-----------------------------------------------------------
        /* Exclusive use for global variables */
        public string Visit(VarDefList node) {
           var sb = new StringBuilder();
           foreach (var id in node) {
               sb.Append(String.Format(
                    "\t\t.field private static int64 {0}\n",
                    "'" + id.AnchorToken.Lexeme + "'"
               ));
           }
           return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(StmtList node) {
            var sb = new StringBuilder();
            foreach (var statement in node) {
                sb.Append( Visit((dynamic) statement) );
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(StmtIf node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                if (child is StmtList) {
                    sb.Append( Visit((dynamic) child) );
                }
                else if (child is ElseIfList) {
                    sb.Append(String.Format(
                        "\t\t{0}:\n{1}",
                        this.lastLabel,
                        Visit((dynamic) child)
                    ));
                }
                else { //Condition node
                    sb.Append(String.Format(
                        "{0}\t\t\tbrfalse {1}\n",
                        Visit((dynamic) child),
                        GenerateLabel()
                    ));
                }
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(ElseIfList node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(ElseIf node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                if (child is StmtList) {
                    sb.Append( Visit((dynamic) child) );
                }
                else { //Condition node
                    sb.Append(String.Format(
                        "{0}\t\t\tbrfalse {1}\n",
                        Visit((dynamic) child),
                        GenerateLabel()
                    ));
                }
            }
            sb.Append(String.Format(
                "\t\t{0}:\n",
                this.lastLabel
            ));
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(Else node) {
            return Visit((dynamic) node[0]);
        }

        //-----------------------------------------------------------
        public string Visit(StmtSwitch node) {
            return "";
        }

        //-----------------------------------------------------------
        public string Visit(CaseList node) {return "";}

        //-----------------------------------------------------------
        public string Visit(Case node) {return "";}

        //-----------------------------------------------------------
        public string Visit(LitList node) {return "";}

        //-----------------------------------------------------------
        public string Visit(Default node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StmtWhile node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StmtDoWhile node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StmtFor node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StmtBreak node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StmtContinue node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StmtReturn node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StmtEmpty node) {return "";}

        //----------------- ARITHMETIC OPERATORS -----------------//
        public string Visit(Minus node) {
            short children = 0;
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
                children++;
            }
            if (children > 1) {
                sb.Append("\t\t\tsub\n");
            } else {
                sb.Append("\t\t\tneg\n");
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(Plus node) {
            short children = 0;
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
                children++;
            }
            if (children > 1) {
                sb.Append("\t\t\tadd\n");
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(Power node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tcall int64 class ['int64lib']'Int64'.'Utils'::'Pow'(int64, int64)\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(Times node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tmul\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(Division node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tdiv\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(Remainder node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\trem\n");
            return sb.ToString();
        }

        //------------------ BITWISE OPERATORS ------------------//
        public string Visit(BitwiseNot node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tnot\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(BitwiseAnd node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tand\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(BitwiseOr node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tor\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(BitwiseXor node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\txor\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(BitwiseShiftLeft node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tshl\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(BitwiseShiftRight node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tshr\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(BitwiseUnsignedShiftRight node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tshr.un\n");
            return sb.ToString();
        }

        //------------------- LOGICAL OPERATORS -------------------//
        public string Visit(LogicalNot node) {return "";}

        //-----------------------------------------------------------
        public string Visit(LogicalAnd node) {return "";}

        //-----------------------------------------------------------
        public string Visit(LogicalOr node) {return "";}

        //----------------- COMPARISON OPERATORS -----------------//
        public string Visit(Equal node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tceq\n\t\t\tconv.i8\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(NotEqual node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tceq\n" +
                        "\t\t\tnot\n" +
                        "\t\t\tconv.i8\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(GreaterThan node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tcgt\n\t\t\tconv.i8\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(GreaterEqualThan node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tclt\n" +
                        "\t\t\tnot\n" +
                        "\t\t\tconv.i8\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(LessThan node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tclt\n\t\t\tconv.i8\n");
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(LessEqualThan node) {
            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }
            sb.Append("\t\t\tcgt\n" +
                        "\t\t\tnot\n" +
                        "\t\t\tconv.i8\n");
            return sb.ToString();
        }

        //------------------- OTHERS OPERATORS -------------------//
        public string Visit(FunCall node) {
            var functionName = node.AnchorToken.Lexeme;

            var sb = new StringBuilder();
            foreach (var child in node) {
                sb.Append( Visit((dynamic) child) );
            }

            var arity = new StringBuilder();
            for (var i = 0; i < this.Functions[functionName].Arity; i++) {
                arity.Append("int64, ");
            }
            arity.Append("?").Replace(", ?", "");

            sb.Append(String.Format(
                "\t\t\tcall int64 c{2}lass int64Program::{0}({1})\n",
                "'" + functionName + "'",
                arity.ToString(),""
            ));
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(TernaryOperator node) {return "";}

        //-----------------------------------------------------------
        public string Visit(ArrayList node) {return "";}

        //-----------------------------------------------------------
        public string Visit(True node) {return "";}

        //-----------------------------------------------------------
        public string Visit(False node) {return "";}

        //-----------------------------------------------------------
        /* Exclusive use for variables in statements*/
        public string Visit(Identifier node) {
            var id = node.AnchorToken.Lexeme;
            if (this.Functions[this.currentScope].ContainsLocalVar(id)) {
                return String.Format(
                    "\t\t\tldloc {0}\n", id
                );
            }
            else if (this.Functions[this.currentScope].ContainsParameter(id)) {
                return String.Format(
                    "\t\t\tldarg {0}\n", id
                );
            }
            else {
                return String.Format(
                    "\t\t\tldsfld int64 int64Program::{0}\n", id
                );
            }
           // return "'" + node.AnchorToken.Lexeme + "'";
        }

        //-----------------------------------------------------------
        public string Visit(IntLiteral node) {return "";}

        //-----------------------------------------------------------
        public string Visit(CharLiteral node) {return "";}

        //-----------------------------------------------------------
        public string Visit(StringLiteral node) {return "";}

        //-----------------------------------------------------------
        public string Visit(Assignment node) {return "";}

    }
}
